<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Extension.Database</name>
    </assembly>
    <members>
        <member name="T:Extension.Database.DBHandler">
            <summary>
            Handler for shared, basic database operations.
            </summary>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteScript(System.Data.Common.DbConnection,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL script using non-query execution. Useful for non-query and non-data insertion (UPDATE and DELETE).
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="script">the script to be executed using non-query execution.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows affected.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteScript(System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL script using non-query execution. Useful for non-query and non-data insertion (UPDATE and DELETE).
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="script">the script to be executed using non-query execution.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows affected.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteScript(System.Data.Common.DbConnection,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL script using non-query execution. Useful for non-query and non-data insertion (UPDATE and DELETE).
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="script">the script to be executed using non-query execution.</param>
            <param name="pars">list of SQL parameters.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows affected.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteScript(System.String,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL script using non-query execution. Useful for non-query and non-data insertion (UPDATE and DELETE).
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="script">the script to be executed using non-query execution.</param>
            <param name="pars">list of SQL parameters.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows affected.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteSpecialScript(System.Data.Common.DbConnection,System.String,System.Collections.Generic.List{System.Object},Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL script using non-query execution. Useful for non-query and non-data insertion (UPDATE and DELETE).
            The parameters in the [script] must be specially named @par1, @par2, @par3, and so on in accordance with the list of object ([parValues]) assigned
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="script">the script to be executed using non-query execution.</param>
            <param name="parValues">the list of objects containing values of specially named parameters in the [script]</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows affected.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteSpecialScript(System.String,System.String,System.Collections.Generic.List{System.Object},Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL script using non-query execution. Useful for non-query and non-data insertion (UPDATE and DELETE).
            The parameters in the [script] must be specially named @par1, @par2, @par3, and so on in accordance with the list of object ([parValues]) assigned
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="script">the script to be executed using non-query execution.</param>
            <param name="parValues">the list of objects containing values of specially named parameters in the [script]</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows affected.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteSpecialScriptGetTable(System.Data.Common.DbConnection,System.String,System.Collections.Generic.List{System.Object},Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL script and return table from the execution. 
            The parameters in the [script] must be specially named @par1, @par2, @par3, and so on in accordance with the list of object ([parValues]) assigned
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="script">the script to be executed that returns DataTable</param>
            <param name="parValues">the list of objects containing values of specially named parameters in the [script]</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The DataTable result of the executed script</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteSpecialScriptGetTable(System.String,System.String,System.Collections.Generic.List{System.Object},Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL script and return table from the execution.
            The parameters in the [script] must be specially named @par1, @par2, @par3, and so on in accordance with the list of object ([parValues]) assigned
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="script">the script to be executed that returns DataTable</param>
            <param name="parValues">the list of objects containing values of specially named parameters in the [script]</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The DataTable result of the executed script</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteCommandGetTable(System.Data.Common.DbConnection,System.Data.Common.DbCommand,Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL command and return table from the execution.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="command">the command to be executed that returns DataTable</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The DataTable result of the executed script</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteCommandGetTable(System.String,System.Data.Common.DbCommand,Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL command and return table from the execution.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="command">the command to be executed that returns DataTable</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The DataTable result of the executed script</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteScalar(System.Data.Common.DbConnection,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL script using scalar execution. Useful for data insertion (INSERT INTO).
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="script">the script to be executed using scalar execution.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>generated object (generated Id when used for data insertion).</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteScalar(System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL script using scalar execution. Useful for data insertion (INSERT INTO).
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="script">the script to be executed using scalar execution.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>generated object (generated Id when used for data insertion).</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL script using scalar execution. Useful for data insertion (INSERT INTO).
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="script">the script to be executed using scalar execution.</param>
            <param name="pars">list of SQL parameters.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>generated object (generated Id when used for data insertion).</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteScalar(System.String,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL script using scalar execution. Useful for data insertion (INSERT INTO).
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="script">the script to be executed using scalar execution.</param>
            <param name="pars">list of SQL parameters.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>generated object (generated Id when used for data insertion).</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteProcedureOrFunction(System.Data.Common.DbConnection,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To execute a Stored Procedure or a Function using non-query execution.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="script">the script to be executed using non-query execution.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>generated integer.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteProcedureOrFunction(System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To execute a Stored Procedure or a Function using non-query execution.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="script">the script to be executed using non-query execution.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>generated integer.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteProcedureOrFunction(System.Data.Common.DbConnection,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},Extension.Database.DBHandlerType)">
            <summary>
            To execute a Stored Procedure or a Function using non-query execution.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="script">the script to be executed using non-query execution.</param>
            <param name="pars">list of SQL parameters.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>generated integer.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteProcedureOrFunction(System.String,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},Extension.Database.DBHandlerType)">
            <summary>
            To execute a Stored Procedure or a Function using non-query execution.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="script">the script to be executed using non-query execution.</param>
            <param name="pars">list of SQL parameters.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>generated integer.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteProcedureOrFunction(System.Data.Common.DbConnection,Extension.Database.DBBaseScriptModel,Extension.Database.DBHandlerType)">
            <summary>
            To execute a Stored Procedure or a Function using non-query execution.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="scriptModel">basic script model to be executed.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>generated integer.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteProcedureOrFunction(System.String,Extension.Database.DBBaseScriptModel,Extension.Database.DBHandlerType)">
            <summary>
            To execute a Stored Procedure or a Function using non-query execution.
            Note: this method is unavailable for SQLite.
            <para>
            (deprecated) use function with SQLServerBaseScriptModel instead.
            </para>
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="scriptModel">basic script model to be executed.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>generated integer.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetProcedures(System.Data.Common.DbConnection,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of Stored Procedures available in the Database.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of Stored Procedures.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetProcedures(System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of Stored Procedures available in the Database.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of Stored Procedures.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetProcedureParameterNames(System.Data.Common.DbConnection,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of parameter names of a Stored Procedure available in the Database.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="procedureName">the Stored Procedure name to get the parameter names from.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of parameter names of the given Stored Procedure.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetProcedureParameterNames(System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of parameter names of a Stored Procedure available in the Database.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="procedureName">the Stored Procedure name to get the parameter names from.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of parameter names of the given Stored Procedure.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetProcedureParameters(System.Data.Common.DbConnection,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of parameter names and parameter data types of a Stored Procedure available in the Database.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="procedureName">the Stored Procedure name.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of parameter names and parameter data types of the given Stored Procedure.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetProcedureParameters(System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of parameter names and parameter data types of a Stored Procedure available in the Database.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="procedureName">the Stored Procedure name.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of parameter names and parameter data types of the given Stored Procedure.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetProceduresAndParameters(System.Data.Common.DbConnection,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Stored Procedures and their respective parameter names and parameter data types from a database connection.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="parameterOrderByClause">the ORDER BY clause to order the sequence of the parameter data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Stored Procedures and their respective parameter names and data types.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetProceduresAndParameters(System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Stored Procedures and their respective parameter names and parameter data types from a database connection.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="parameterOrderByClause">the ORDER BY clause to order the sequence of the parameter data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Stored Procedures and their respective parameter names and data types.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetProceduresAndParameterNames(System.Data.Common.DbConnection,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Stored Procedures and their respective parameter names from a database connection.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="parameterOrderByClause">the ORDER BY clause to order the sequence of the parameter data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Stored Procedures and their respective parameter names.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetProceduresAndParameterNames(System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Stored Procedures and their respective parameter names from a database connection.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="parameterOrderByClause">the ORDER BY clause to order the sequence of the parameter data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Stored Procedures and their respective parameter names.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetProceduresAndArguments(System.Data.Common.DbConnection,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Stored Procedures and their respective arguments from a database connection.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="argumentOrderByClause">the ORDER BY clause to order the sequence of the argument data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="oraclePackageName">Oracle Only: the package name of the objects.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Stored Procedures and their respective arguments.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetProceduresAndArguments(System.String,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Stored Procedures and their respective arguments from a database connection.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="argumentOrderByClause">the ORDER BY clause to order the sequence of the argument data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="oraclePackageName">Oracle Only: the package name of the objects.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Stored Procedures and their respective arguments.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFunctions(System.Data.Common.DbConnection,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of Functions available in the Database.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of Functions.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFunctions(System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of Functions available in the Database.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of Functions.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFunctionParameterNames(System.Data.Common.DbConnection,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of parameter names of a Function available in the Database.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="functionName">the Function name to get the parameter names from.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of parameter names of the given Function.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFunctionParameterNames(System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of parameter names of a Function available in the Database.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="functionName">the Function name to get the parameter names from.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of parameter names of the given Function.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFunctionParameters(System.Data.Common.DbConnection,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of parameter names and parameter data types of a Function available in the Database.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="functionName">the Function name.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of parameter names and parameter data types of the given Function.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFunctionParameters(System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of parameter names and parameter data types of a Function available in the Database.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="functionName">the Function name.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of parameter names and parameter data types of the given Function.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFunctionsAndParameters(System.Data.Common.DbConnection,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Functions and their respective parameter names and parameter data types from a database connection.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="parameterOrderByClause">the ORDER BY clause to order the sequence of the parameter data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Functions and their respective parameter names and data types.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFunctionsAndParameters(System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Functions and their respective parameter names and parameter data types from a database connection.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="parameterOrderByClause">the ORDER BY clause to order the sequence of the parameter data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Functions and their respective parameter names and data types.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFunctionsAndParameterNames(System.Data.Common.DbConnection,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Functions and their respective parameter names from a database connection.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="parameterOrderByClause">the ORDER BY clause to order the sequence of the parameter data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Functions and their respective parameter names.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFunctionsAndParameterNames(System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Functions and their respective parameter names from a database connection.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="parameterOrderByClause">the ORDER BY clause to order the sequence of the parameter data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Functions and their respective parameter names.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFunctionsAndArguments(System.Data.Common.DbConnection,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Functions and their respective arguments from a database connection.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="argumentOrderByClause">the ORDER BY clause to order the sequence of the argument data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="oraclePackageName">Oracle Only: the package name of the objects.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Functions and their respective arguments.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFunctionsAndArguments(System.String,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Functions and their respective arguments from a database connection.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="argumentOrderByClause">the ORDER BY clause to order the sequence of the argument data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="oraclePackageName">Oracle Only: the package name of the objects.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Functions and their respective arguments.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSpfs(System.Data.Common.DbConnection,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of Stored Procedures or Functions available in the Database.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of Stored Procedures or Functions.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSpfs(System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of Stored Procedures or Functions available in the Database.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of Stored Procedures or Functions.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSpfParameterNames(System.Data.Common.DbConnection,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of parameter names of a Stored Procedure or a Function available in the Database.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="spfName">the Stored Procedure or Function name to get the parameter names from.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of parameter names of the given Stored Procedure or Function.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSpfParameterNames(System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of parameter names of a Stored Procedure or a Function available in the Database.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="spfName">the Stored Procedure or Function name to get the parameter names from.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of parameter names of the given Stored Procedure or Function.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSpfParameters(System.Data.Common.DbConnection,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of parameter names and parameter data types of a Stored Procedure or a Function available in the Database.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="spfName">the Stored Procedure or Function name.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of parameter names and parameter data types of the given Stored Procedure or Function.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSpfParameters(System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of parameter names and parameter data types of a Stored Procedure or a Function available in the Database.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="spfName">the Stored Procedure or Function name.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of parameter names and parameter data types of the given Stored Procedure or Function.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSpfsAndParameters(System.Data.Common.DbConnection,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Stored Procedures or Functions and their respective parameter names and parameter data types from a database connection.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="parameterOrderByClause">the ORDER BY clause to order the sequence of the parameter data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Stored Procedures or Functions and their respective parameter names and data types.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSpfsAndParameters(System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Stored Procedures or Functions and their respective parameter names and parameter data types from a database connection.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="parameterOrderByClause">the ORDER BY clause to order the sequence of the parameter data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Stored Procedures or Functions and their respective parameter names and data types.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSpfsAndParameterNames(System.Data.Common.DbConnection,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Stored Procedures or Functions and their respective parameter names from a database connection.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="parameterOrderByClause">the ORDER BY clause to order the sequence of the parameter data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Stored Procedures or Functions and their respective parameter names.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSpfsAndParameterNames(System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Stored Procedures or Functions and their respective parameter names from a database connection.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="parameterOrderByClause">the ORDER BY clause to order the sequence of the parameter data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Stored Procedures or Functions and their respective parameter names.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSpfsAndArguments(System.Data.Common.DbConnection,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Stored Procedures and Functions and their respective arguments from a database connection.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="argumentOrderByClause">the ORDER BY clause to order the sequence of the argument data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="oraclePackageName">Oracle Only: the package name of the objects.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Stored Procedures and Functions and their respective arguments.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSpfsAndArguments(System.String,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of Stored Procedures and Functions and their respective arguments from a database connection.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="argumentOrderByClause">the ORDER BY clause to order the sequence of the argument data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="oraclePackageName">Oracle Only: the package name of the objects.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of Stored Procedures and Functions and their respective arguments.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetArguments(System.Data.Common.DbConnection,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of arguments of an Object available in the Database.
            Note: this method is unavailable for SQLite.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="objectName">the Object name.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="oraclePackageName">Oracle Only: the package name of the objects.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of arguments of the given Object.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetArguments(System.String,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the list of arguments of an Object available in the Database.
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="objectName">the Object name.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="ownerOrSchema">the owner/schema of the objects.
            <para>owner: Oracle</para>
            <para>schema: MySQL</para>
            <para>unused: SQL Server, SQLite</para>
            </param>
            <param name="oraclePackageName">Oracle Only: the package name of the objects.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of arguments of the given Object.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteScriptExtractDateTimeWithAddition(System.Data.Common.DbConnection,System.String,System.Int32,Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL script to extract DateTime value and to return the DateTime with additional value in seconds.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="script">the script to be executed. It is a select script, getting (ideally) only one-row-on-column DateTime value from the database</param>
            <param name="addVal">the additional values to be added in seconds.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>DateTime value from database with additional addVal second(s). Returns null when failed to parse the database value.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteScriptExtractDateTimeWithAddition(System.String,System.String,System.Int32,Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL script to extract DateTime value and to return the DateTime with additional value in seconds.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="script">the script to be executed. It is a select script, getting (ideally) only one-row-on-column DateTime value from the database</param>
            <param name="addVal">the additional values to be added in seconds.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>DateTime value from database with additional addVal second(s). Returns null when failed to parse the database value.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteScriptExtractDecimalWithAddition(System.Data.Common.DbConnection,System.String,System.Decimal,Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL script to extract Decimal value and to return the Decimal with additional value.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="script">the script to be executed. It is a select script, getting (ideally) only one-row-on-column Decimal value from the database</param>
            <param name="addVal">the additional values to be.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>Decimal value from database with additional addVal. Returns null when failed to parse the database value.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteScriptExtractDecimalWithAddition(System.String,System.String,System.Decimal,Extension.Database.DBHandlerType)">
            <summary>
            To execute SQL script to extract Decimal value and to return the Decimal with additional value.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="script">the script to be executed. It is a select script, getting (ideally) only one-row-on-column Decimal value from the database</param>
            <param name="addVal">the additional values to be.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>Decimal value from database with additional addVal. Returns null when failed to parse the database value.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetAggregatedValues(System.Data.Common.DbConnection,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the "best" aggregate value from multiple tables. Supported aggregate functions: MAX, MIN.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableColumnNames">table-column pairs to get the aggregate value from, used to get aggregate values from multiple tables.</param>
            <param name="aggFunction">the aggregate function applied: MAX or MIN.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the "best" aggregated value.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetAggregatedValues(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the "best" aggregate value from multiple tables. Supported aggregate functions: MAX, MIN.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableColumnNames">table-column pairs to get the aggregate value from, used to get aggregate values from multiple tables.</param>
            <param name="aggFunction">the aggregate function applied: MAX or MIN.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection.
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the "best" aggregated value.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetAggregatedValue(System.Data.Common.DbConnection,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get an aggregate value of a single column from a single table.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the column from.</param>
            <param name="columnName">the column name to get the aggregated values from.</param>
            <param name="aggFunction">the aggregate function applied.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the aggregated value.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetAggregatedValue(System.String,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get an aggregate value of a single column from a single table.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the column from.</param>
            <param name="columnName">the column name to get the aggregated values from.</param>
            <param name="aggFunction">the aggregate function applied.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the aggregated value.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteBaseScripts(System.Data.Common.DbConnection,System.Collections.Generic.List{Extension.Database.DBBaseScriptModel},Extension.Database.DBHandlerType)">
            <summary>
            To execute series of basic scripts (single insertion, update, or deletion) in a single transaction.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="scripts">collection of basic scripts to be executed.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of number of affected rows, it should all be 1 for successful transaction using basic scripts.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ExecuteBaseScripts(System.String,System.Collections.Generic.List{Extension.Database.DBBaseScriptModel},Extension.Database.DBHandlerType)">
            <summary>
            To execute series of basic scripts (single insertion, update, or deletion) in a single transaction.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="scripts">collection of basic scripts to be executed.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of number of affected rows, it should all be 1 for successful transaction using basic scripts.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.StartTransaction(System.Data.Common.DbConnection,Extension.Database.DBHandlerType)">
            <summary>
            To start a transaction
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
        </member>
        <member name="M:Extension.Database.DBHandler.EndTransaction(System.Data.Common.DbConnection,Extension.Database.DBHandlerType)">
            <summary>
            To end a transaction
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
        </member>
        <member name="M:Extension.Database.DBHandler.Rollback(System.Data.Common.DbConnection,Extension.Database.DBHandlerType)">
            <summary>
            To roleback an on-going transaction
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
        </member>
        <member name="M:Extension.Database.DBHandler.CommitAndRestartTransaction(System.Data.Common.DbConnection,Extension.Database.DBHandlerType)">
            <summary>
            To commit an on-going transaction and then start a new transaction
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
        </member>
        <member name="M:Extension.Database.DBHandler.ClearTable(System.Data.Common.DbConnection,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To clear a data from a table completely.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to be cleared.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows affected.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.ClearTable(System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To clear a data from a table completely.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to be cleared.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows affected.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.DeleteFromTableWhere(System.Data.Common.DbConnection,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To delete data from a table given a where clause.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the name of the table whose data is to be deleted from.</param>
            <param name="whereClause">where clause to qualify the deletion.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows affected.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.DeleteFromTableWhere(System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To delete data from a table given a where clause.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the name of the table whose data is to be deleted from.</param>
            <param name="whereClause">where clause to qualify the deletion.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows affected.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.Insert(System.Data.Common.DbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To insert an item to the specified table.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnAndValues">the dictionary of names and values used for the insertion.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>object returned by execute scalar of the insertion script, usually an id.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.Insert(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To insert an item to the specified table.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnAndValues">the dictionary of names and values used for the insertion.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>object returned by execute scalar of the insertion script, usually an id.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.Update(System.Data.Common.DbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object,System.Collections.Generic.List{System.String},System.Boolean,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To update table item(s) qualified by single idName and single idValue.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnAndValues">the dictionary of names and values used for the update.</param>
            <param name="idName">the single column used as the qualifier for the update.</param>
            <param name="idValue">the value of the idName column used as the qualifier for the update.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="oracleIdIsTimeStamp">Oracle Only: to be set as true if id is a TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows of affected in the table.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.Update(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object,System.Collections.Generic.List{System.String},System.Boolean,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To update table item(s) qualified by single idName and single idValue.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnAndValues">the dictionary of names and values used for the update.</param>
            <param name="idName">the single column used as the qualifier for the update.</param>
            <param name="idValue">the value of the idName column used as the qualifier for the update.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="oracleIdIsTimeStamp">Oracle Only: to be set as true if id is a TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows of affected in the table.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.UpdateWhere(System.Data.Common.DbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.String,System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To update table item(s) which satisfy the WHERE clause condition.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnAndValues">the dictionary of names and values used for the update.</param>
            <param name="whereClause">the WHERE clause condition for the update.</param>
            <param name="wherePars">the parameters of the where clause.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows of affected in the table.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.UpdateWhere(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.String,System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To update table item(s) which satisfy the WHERE clause condition.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnAndValues">the dictionary of names and values used for the update.</param>
            <param name="whereClause">the WHERE clause condition for the update.</param>
            <param name="wherePars">the parameters of the where clause.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows of affected in the table.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetCount(System.Data.Common.DbConnection,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the number of rows of the specified table.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows of the retrieved table.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetCount(System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the number of rows of the specified table.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows of the retrieved table.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetCountByScript(System.Data.Common.DbConnection,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the number of rows of the specified table by simple execution of a script.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="script">the script to be executed.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows of the retrieved table.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetCountByScript(System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the number of rows of the specified table by simple execution of a script.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="script">the script to be executed.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows of the retrieved table.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetCountWhere(System.Data.Common.DbConnection,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the number of rows of the specified table which satisfy the WHERE clause condition.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="whereClause">the WHERE clause to filter the data queried.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows of the retrieved table.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetCountWhere(System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the number of rows of the specified table which satisfy the WHERE clause condition.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="whereClause">the WHERE clause to filter the data queried.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows of the retrieved table.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetCountFilterBy(System.Data.Common.DbConnection,System.String,System.Object,System.Boolean,System.String,System.String,System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To get the number of rows of the specified table filtered by default method using filterObj filter object.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="filterObj">the filter object used to filter the data queried.</param>
            <param name="useNull">to specify if null value in the filterObj is interpreted as equal to NULL or is skipped.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows of the retrieved table.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetCountFilterBy(System.String,System.String,System.Object,System.Boolean,System.String,System.String,System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To get the number of rows of the specified table filtered by default method using filterObj filter object.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="filterObj">the filter object used to filter the data queried.</param>
            <param name="useNull">to specify if null value in the filterObj is interpreted as equal to NULL or is skipped.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows of the retrieved table.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetCountFilterByParameters(System.Data.Common.DbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the number of rows of the specified table filtered by default method using a collection of filter column name-value pairs.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="filters">the collection of filter column name-value pairs used to filter the data queried.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows of the retrieved table.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetCountFilterByParameters(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the number of rows of the specified table filtered by default method using a collection of filter column name-value pairs.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="filters">the collection of filter column name-value pairs used to filter the data queried.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>number of rows of the retrieved table.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetColumns(System.Data.Common.DbConnection,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the columns (list of DataColumn) of the specified table.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of DataColumns of the retrieved table.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetColumns(System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get the columns (list of DataColumn) of the specified table.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>list of DataColumns of the retrieved table.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFullDataTable(System.Data.Common.DbConnection,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get complete data (all columns retrieved) from the specified table.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFullDataTable(System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get complete data (all columns retrieved) from the specified table.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFullDataTableWhere(System.Data.Common.DbConnection,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get complete data (all columns retrieved) from the specified table which satisfy the WHERE clause condition.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="whereClause">the WHERE clause to filter the data queried.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFullDataTableWhere(System.String,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get complete data (all columns retrieved) from the specified table which satisfy the WHERE clause condition.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="whereClause">the WHERE clause to filter the data queried.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFullDataTableFilterBy(System.Data.Common.DbConnection,System.String,System.Object,System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To get complete data (all columns retrieved) from the specified table filtered by default method using filterObj filter object.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="filterObj">the filter object used to filter the data queried.</param>
            <param name="useNull">to specify if null value in the filterObj is interpreted as equal to NULL or is skipped.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFullDataTableFilterBy(System.String,System.String,System.Object,System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To get complete data (all columns retrieved) from the specified table filtered by default method using filterObj filter object.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="filterObj">the filter object used to filter the data queried.</param>
            <param name="useNull">to specify if null value in the filterObj is interpreted as equal to NULL or is skipped.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFullDataTableFilterByParameters(System.Data.Common.DbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get complete data (all columns retrieved) from the specified table filtered by default method using a collection of filter column name-value pairs.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="filters">the collection of filter column name-value pairs used to filter the data queried.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFullDataTableFilterByParameters(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get complete data (all columns retrieved) from the specified table filtered by default method using a collection of filter column name-value pairs.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="filters">the collection of filter column name-value pairs used to filter the data queried.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetPartialDataTable(System.Data.Common.DbConnection,System.String,System.Collections.Generic.List{System.String},System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get selected columns' data from the specified table.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnNames">the selected columns to be queried from the data table.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetPartialDataTable(System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get selected columns' data from the specified table.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnNames">the selected columns to be queried from the data table.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetPartialDataTableWhere(System.Data.Common.DbConnection,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get selected columns' data from the specified table which satisfy the WHERE clause condition.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnNames">the selected columns to be queried from the data table.</param>
            <param name="whereClause">the WHERE clause to filter the data queried.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetPartialDataTableWhere(System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get selected columns' data from the specified table which satisfy the WHERE clause condition.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnNames">the selected columns to be queried from the data table.</param>
            <param name="whereClause">the WHERE clause to filter the data queried.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetPartialDataTableFilterBy(System.Data.Common.DbConnection,System.String,System.Collections.Generic.List{System.String},System.Object,System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To get selected columns' data from the specified table filtered by default method using filterObj filter object.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnNames">the selected columns to be queried from the data table.</param>
            <param name="filterObj">the filter object used to filter the data queried.</param>
            <param name="useNull">to specify if null value in the filterObj is interpreted as equal to NULL or is skipped.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetPartialDataTableFilterBy(System.String,System.String,System.Collections.Generic.List{System.String},System.Object,System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To get selected columns' data from the specified table filtered by default method using filterObj filter object.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnNames">the selected columns to be queried from the data table.</param>
            <param name="filterObj">the filter object used to filter the data queried.</param>
            <param name="useNull">to specify if null value in the filterObj is interpreted as equal to NULL or is skipped.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetPartialDataTableFilterByParameters(System.Data.Common.DbConnection,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get selected columns' data from the specified table filtered by default method using a collection of filter column name-value pairs.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnNames">the selected columns to be queried from the data table.</param>
            <param name="filters">the collection of filter column name-value pairs used to filter the data queried.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetPartialDataTableFilterByParameters(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get selected columns' data from the specified table filtered by default method using a collection of filter column name-value pairs.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnNames">the selected columns to be queried from the data table.</param>
            <param name="filters">the collection of filter column name-value pairs used to filter the data queried.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFullFirstDataRow(System.Data.Common.DbConnection,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get first data row of complete data (all columns retrieved) from the specified table.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the first DataRow query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFullFirstDataRow(System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get first data row of complete data (all columns retrieved) from the specified table.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the first DataRow query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFullFirstDataRowWhere(System.Data.Common.DbConnection,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get first data row of complete data (all columns retrieved) from the specified table which satisfy the WHERE clause condition.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="whereClause">the WHERE clause to filter the data queried.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the first DataRow query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFullFirstDataRowWhere(System.String,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get first data row of complete data (all columns retrieved) from the specified table which satisfy the WHERE clause condition.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="whereClause">the WHERE clause to filter the data queried.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the first DataRow query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFullFirstDataRowFilterBy(System.Data.Common.DbConnection,System.String,System.Object,System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To get first data row of complete data (all columns retrieved) from the specified table filtered by default method using filterObj filter object.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="filterObj">the filter object used to filter the data queried.</param>
            <param name="useNull">to specify if null value in the filterObj is interpreted as equal to NULL or is skipped.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the first DataRow query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFullFirstDataRowFilterBy(System.String,System.String,System.Object,System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To get first data row of complete data (all columns retrieved) from the specified table filtered by default method using filterObj filter object.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="filterObj">the filter object used to filter the data queried.</param>
            <param name="useNull">to specify if null value in the filterObj is interpreted as equal to NULL or is skipped.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the first DataRow query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFullFirstDataRowFilterByParameters(System.Data.Common.DbConnection,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get first data row of complete data (all columns retrieved) from the specified table filtered by default method using a collection of filter column name-value pairs.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="filters">the collection of filter column name-value pairs used to filter the data queried.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the first DataRow query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFullFirstDataRowFilterByParameters(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get first data row of complete data (all columns retrieved) from the specified table filtered by default method using a collection of filter column name-value pairs.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="filters">the collection of filter column name-value pairs used to filter the data queried.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the first DataRow query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetPartialFirstDataRow(System.Data.Common.DbConnection,System.String,System.Collections.Generic.List{System.String},System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get first data row of selected columns' data from the specified table.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnNames">the selected columns to be queried from the data table.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the first DataRow query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetPartialFirstDataRow(System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get first data row of selected columns' data from the specified table.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnNames">the selected columns to be queried from the data table.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the first DataRow query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetPartialFirstDataRowWhere(System.Data.Common.DbConnection,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get first data row of selected columns' data from the specified table which satisfy the WHERE clause condition.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnNames">the selected columns to be queried from the data table.</param>
            <param name="whereClause">the WHERE clause to filter the data queried.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the first DataRow query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetPartialFirstDataRowWhere(System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get first data row of selected columns' data from the specified table which satisfy the WHERE clause condition.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnNames">the selected columns to be queried from the data table.</param>
            <param name="whereClause">the WHERE clause to filter the data queried.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the first DataRow query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetPartialFirstDataRowFilterBy(System.Data.Common.DbConnection,System.String,System.Collections.Generic.List{System.String},System.Object,System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To get first data row of selected columns' data from the specified table filtered by default method using filterObj filter object.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnNames">the selected columns to be queried from the data table.</param>
            <param name="filterObj">the filter object used to filter the data queried.</param>
            <param name="useNull">to specify if null value in the filterObj is interpreted as equal to NULL or is skipped.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the first DataRow query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetPartialFirstDataRowFilterBy(System.String,System.String,System.Collections.Generic.List{System.String},System.Object,System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To get first data row of selected columns' data from the specified table filtered by default method using filterObj filter object.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnNames">the selected columns to be queried from the data table.</param>
            <param name="filterObj">the filter object used to filter the data queried.</param>
            <param name="useNull">to specify if null value in the filterObj is interpreted as equal to NULL or is skipped.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the first DataRow query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetPartialFirstDataRowFilterByParameters(System.Data.Common.DbConnection,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get first data row of selected columns' data from the specified table filtered by default method using a collection of filter column name-value pairs.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnNames">the selected columns to be queried from the data table.</param>
            <param name="filters">the collection of filter column name-value pairs used to filter the data queried.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the first DataRow query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetPartialFirstDataRowFilterByParameters(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get first data row of selected columns' data from the specified table filtered by default method using a collection of filter column name-value pairs.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnNames">the selected columns to be queried from the data table.</param>
            <param name="filters">the collection of filter column name-value pairs used to filter the data queried.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the first DataRow query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSingleColumn(System.Data.Common.DbConnection,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get selected column's data from the specified table.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnName">the selected column to be queried from the data table.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the list of object query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSingleColumn(System.String,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get selected column's data from the specified table.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnName">the selected column to be queried from the data table.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the list of object query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSingleColumnWhere(System.Data.Common.DbConnection,System.String,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get selected column's data from the specified table which satisfy the WHERE clause condition.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnName">the selected column to be queried from the data table.</param>
            <param name="whereClause">the WHERE clause to filter the data queried.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the list of object query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSingleColumnWhere(System.String,System.String,System.String,System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get selected column's data from the specified table which satisfy the WHERE clause condition.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnName">the selected column to be queried from the data table.</param>
            <param name="whereClause">the WHERE clause to filter the data queried.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the list of object query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSingleColumnFilterBy(System.Data.Common.DbConnection,System.String,System.String,System.Object,System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To get selected column's data from the specified table filtered by default method using filterObj filter object.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnName">the selected column to be queried from the data table.</param>
            <param name="filterObj">the filter object used to filter the data queried.</param>
            <param name="useNull">to specify if null value in the filterObj is interpreted as equal to NULL or is skipped.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the list of object query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSingleColumnFilterBy(System.String,System.String,System.String,System.Object,System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To get selected column's data from the specified table filtered by default method using filterObj filter object.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnName">the selected column to be queried from the data table.</param>
            <param name="filterObj">the filter object used to filter the data queried.</param>
            <param name="useNull">to specify if null value in the filterObj is interpreted as equal to NULL or is skipped.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the list of object query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSingleColumnFilterByParameters(System.Data.Common.DbConnection,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get selected column's data from the specified table filtered by default method using a collection of filter column name-value pairs.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnName">the selected column to be queried from the data table.</param>
            <param name="filters">the collection of filter column name-value pairs used to filter the data queried.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the list of object query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetSingleColumnFilterByParameters(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get selected column's data from the specified table filtered by default method using a collection of filter column name-value pairs.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="tableName">the table name to get the data from.</param>
            <param name="columnName">the selected column to be queried from the data table.</param>
            <param name="filters">the collection of filter column name-value pairs used to filter the data queried.</param>
            <param name="addWhereClause">the additional WHERE clause to filter the result further.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="useOrSchema">to specify database/schema to be used other than what has been provided by the current connection. 
            <para>use: SQL Server, MySQL</para>
            <para>schema: Oracle</para>
            <para>unused: SQLite</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the list of object query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetFirstRow(System.Data.DataTable)">
            <summary>
            To get the first row values of a DataTable, returned in simple dictionary format.
            </summary>
            <param name="table">The data DataTable to get the first row from.</param>
            <returns>The first row data result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDataTable(System.Data.Common.DbConnection,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To retrieve DataTable based on generic SELECT SQL query.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="selectSqlQuery">the generic SELECT SQL query to be executed.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDataTable(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter,Extension.Database.DBHandlerType)">
            <summary>
            To retrieve DataTable based on generic SELECT SQL query.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="selectSqlQuery">the generic SELECT SQL query to be executed.</param>
            <param name="par">the parameter of the query string.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDataTable(System.Data.Common.DbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Extension.Database.DBHandlerType)">
            <summary>
            To retrieve DataTable based on generic SELECT SQL query.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="selectSqlQuery">the generic SELECT SQL query to be executed.</param>
            <param name="pars">the parameters of the query string.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDataTable(System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To retrieve DataTable based on generic SELECT SQL query.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="selectSqlQuery">the generic SELECT SQL query to be executed.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDataTable(System.String,System.String,System.Data.Common.DbParameter,Extension.Database.DBHandlerType)">
            <summary>
            To retrieve DataTable based on generic SELECT SQL query.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="selectSqlQuery">the generic SELECT SQL query to be executed.</param>
            <param name="par">the parameter of the query string.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDataTable(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Extension.Database.DBHandlerType)">
            <summary>
            To retrieve DataTable based on generic SELECT SQL query.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="selectSqlQuery">the generic SELECT SQL query to be executed.</param>
            <param name="pars">the parameters of the query string.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataTable query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDataSet(System.Data.Common.DbConnection,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To retrieve DataSet based on generic SELECT SQL query.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="selectSqlQuery">the generic SELECT SQL query to be executed.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataSet query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDataSet(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter,Extension.Database.DBHandlerType)">
            <summary>
            To retrieve DataSet based on generic SELECT SQL query.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="selectSqlQuery">the generic SELECT SQL query to be executed.</param>
            <param name="par">the parameter of the query string.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataSet query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDataSet(System.Data.Common.DbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Extension.Database.DBHandlerType)">
            <summary>
            To retrieve DataSet based on generic SELECT SQL query.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="selectSqlQuery">the generic SELECT SQL query to be executed.</param>
            <param name="pars">the parameters of the query string.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataSet query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDataSet(System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To retrieve DataSet based on generic SELECT SQL query.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="selectSqlQuery">the generic SELECT SQL query to be executed.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataSet query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDataSet(System.String,System.String,System.Data.Common.DbParameter,Extension.Database.DBHandlerType)">
            <summary>
            To retrieve DataSet based on generic SELECT SQL query.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="selectSqlQuery">the generic SELECT SQL query to be executed.</param>
            <param name="par">the parameter of the query string.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataSet query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDataSet(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Extension.Database.DBHandlerType)">
            <summary>
            To retrieve DataSet based on generic SELECT SQL query.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="selectSqlQuery">the generic SELECT SQL query to be executed.</param>
            <param name="pars">the parameters of the query string.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>the DataSet query result.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.InsertObject``1(System.Data.Common.DbConnection,System.String,``0,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To insert an object to the database given proper table name and object.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <typeparam name="T">generic type parameter.</typeparam>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the target table for the object to be inserted into.</param>
            <param name="obj">the object to be inserted.</param>
            <param name="excludedPropertyNames">the properties to be excluded from insertion to the database.</param>
            <param name="dateTimeFormat">the date time format used for DateTime data type.</param>
            <param name="dateTimeFormatMap">the date time format used for DateTime data type per column.</param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>result of scalar execution of the INSERT INTO script.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.InsertObject``1(System.String,System.String,``0,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To insert an object to the database given proper table name and object.
            </summary>
            <typeparam name="T">generic type parameter.</typeparam>
            <param name="connectionString">the SQL connection string to open the database connection.</param>
            <param name="tableName">the target table for the object to be inserted into.</param>
            <param name="obj">the object to be inserted.</param>
            <param name="excludedPropertyNames">the properties to be excluded from insertion to the database.</param>
            <param name="dateTimeFormat">the date time format used for DateTime data type.</param>
            <param name="dateTimeFormatMap">the date time format used for DateTime data type per column.</param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>result of scalar execution of the INSERT INTO script.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.InsertObjects``1(System.Data.Common.DbConnection,System.String,System.Collections.Generic.List{``0},System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To insert list of objects to the database given proper table name and objects.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <typeparam name="T">generic type parameter.</typeparam>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the target table for the objects to be inserted into.</param>
            <param name="objs">the list of objects to be inserted.</param>
            <param name="excludedPropertyNames">the properties to be excluded from insertion to the database.</param>
            <param name="dateTimeFormat">the date time format used for DateTime data type.</param>
            <param name="dateTimeFormatMap">the date time format used for DateTime data type per column.</param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>results of scalar execution of the INSERT INTO script.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.InsertObjects``1(System.String,System.String,System.Collections.Generic.List{``0},System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To insert list of objects to the database given proper table name and objects.
            </summary>
            <typeparam name="T">generic type parameter.</typeparam>
            <param name="connectionString">the SQL connection string to open the database connection.</param>
            <param name="tableName">the target table for the objects to be inserted into.</param>
            <param name="objs">the list of objects to be inserted.</param>
            <param name="excludedPropertyNames">the properties to be excluded from insertion to the database.</param>
            <param name="dateTimeFormat">the date time format used for DateTime data type.</param>
            <param name="dateTimeFormatMap">the date time format used for DateTime data type per column.</param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>results of scalar execution of the INSERT INTO script.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.UpdateObject``1(System.Data.Common.DbConnection,System.String,``0,System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To update an object in the database given proper table name and object.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <typeparam name="T">generic type parameter.</typeparam>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the target table for the object to be inserted into.</param>
            <param name="obj">the object to be inserted.</param>
            <param name="idName">the id name for this object, typically like "Id" or "Name".</param>
            <param name="excludedPropertyNames">the properties to be excluded from insertion to the database.</param>
            <param name="dateTimeFormat">the date time format used for DateTime data type.</param>
            <param name="dateTimeFormatMap">the date time format used for DateTime data type per column.</param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>result of scalar execution of the UPDATE script.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.UpdateObject``1(System.String,System.String,``0,System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To update an object in the database given proper table name and object.
            </summary>
            <typeparam name="T">generic type parameter.</typeparam>
            <param name="connectionString">the SQL connection string to open the database connection.</param>
            <param name="tableName">the target table for the object to be inserted into.</param>
            <param name="obj">the object to be inserted.</param>
            <param name="idName">the id name for this object, typically like "Id" or "Name".</param>
            <param name="excludedPropertyNames">the properties to be excluded from insertion to the database.</param>
            <param name="dateTimeFormat">the date time format used for DateTime data type.</param>
            <param name="dateTimeFormatMap">the date time format used for DateTime data type per column.</param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>result of scalar execution of the UPDATE script.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.UpdateObject``1(System.Data.Common.DbConnection,System.String,``0,System.String,System.String,System.Boolean,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To update an object in the database given proper table name and object.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <typeparam name="T">generic type parameter.</typeparam>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the target table for the object to be inserted into.</param>
            <param name="obj">the object to be inserted.</param>
            <param name="idName">the id name for this object, typically like "Id" or "Name".</param>
            <param name="idValue">the id value used to distinguish the updated object from the others.</param>
            <param name="idValueIsString">to indicate if data type of the id is a string.</param>
            <param name="excludedPropertyNames">the properties to be excluded from insertion to the database.</param>
            <param name="dateTimeFormat">the date time format used for DateTime data type.</param>
            <param name="dateTimeFormatMap">the date time format used for DateTime data type per column.</param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>result of scalar execution of the UPDATE script.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.UpdateObject``1(System.String,System.String,``0,System.String,System.String,System.Boolean,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To update an object in the database given proper table name and object.
            </summary>
            <typeparam name="T">generic type parameter.</typeparam>
            <param name="connectionString">the SQL connection string to open the database connection.</param>
            <param name="tableName">the target table for the object to be inserted into.</param>
            <param name="obj">the object to be inserted.</param>
            <param name="idName">the id name for this object, typically like "Id" or "Name".</param>
            <param name="idValue">the id value used to distinguish the updated object from the others.</param>
            <param name="idValueIsString">to indicate if data type of the id is a string.</param>
            <param name="excludedPropertyNames">the properties to be excluded from insertion to the database.</param>
            <param name="dateTimeFormat">the date time format used for DateTime data type.</param>
            <param name="dateTimeFormatMap">the date time format used for DateTime data type per column.</param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>result of scalar execution of the UPDATE script.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.UpdateObjects``1(System.Data.Common.DbConnection,System.String,System.Collections.Generic.List{``0},System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To update list of objects to the database given proper table name and objects.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <typeparam name="T">generic type parameter.</typeparam>
            <param name="conn">the already opened database connection.</param>
            <param name="tableName">the target table for the objects to be inserted into.</param>
            <param name="objs">the list of objects to be inserted.</param>
            <param name="idName">the id name for this object, typically like "Id" or "Name".</param>
            <param name="excludedPropertyNames">the properties to be excluded from insertion to the database.</param>
            <param name="dateTimeFormat">the date time format used for DateTime data type.</param>
            <param name="dateTimeFormatMap">the date time format used for DateTime data type per column.</param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>results of scalar execution of the INSERT INTO script.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.UpdateObjects``1(System.String,System.String,System.Collections.Generic.List{``0},System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To update list of objects to the database given proper table name and objects.
            </summary>
            <typeparam name="T">generic type parameter.</typeparam>
            <param name="connectionString">the SQL connection string to open the database connection.</param>
            <param name="tableName">the target table for the objects to be inserted into.</param>
            <param name="objs">the list of objects to be inserted.</param>
            <param name="idName">the id name for this object, typically like "Id" or "Name".</param>
            <param name="excludedPropertyNames">the properties to be excluded from insertion to the database.</param>
            <param name="dateTimeFormat">the date time format used for DateTime data type.</param>
            <param name="dateTimeFormatMap">the date time format used for DateTime data type per column.</param>
            <param name="oracleTimeStampList">Oracle Only: to list which columns are TIMESTAMP</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>results of scalar execution of the INSERT INTO script.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.TransferTable``2(System.Data.Common.DbConnection,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To transfer the data from one table to another by using C# classes' instances as intermediary objects.
            The tables must be located in the same database.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <typeparam name="TSource">the generic data type to represent the source table.</typeparam>
            <typeparam name="TDest">the generic data type to represent the destination table.</typeparam>
            <param name="conn">the already opened database connection.</param>
            <param name="sourceTableName">the name of the source table of the transfer.</param>
            <param name="destTableName">the name of the destination table of the transfer.</param>
            <param name="sourceToDestNameMapping">the source to destination class properties' name mapping (from TSource to TDest).</param>
            <param name="sourceExcludedPropertyNames">the names of the properties of source class whose values are NOT transferred to the destination class' instance.</param>
            <param name="destExcludedPropertyNames">the names of the properties of the destination class whose values are NOT transferred to the destination database row entry (likely is the Id of the entry).</param>
            <param name="destDateTimeFormat">the single (default) custom DateTimeFormat to be used in inserting the DateTime columns to the destination database.</param>
            <param name="destDateTimeFormatMap">the column-by-column map of custom DateTimeFormats to be used in inserting the DateTime columns to the destination database.</param>
            <param name="sqliteSourceDateTimeFormatMap">SQLite Only: the column-by-column map of custom DateTimeFormats to be used in extracting the DateTime columns from the source database.</param>
            <param name="oracleDestTimeStampList">Oracle Only: to list which columns are TIMESTAMP in the destination table.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>results of scalar execution of the INSERT INTO script.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.TransferTable``2(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},Extension.Database.DBHandlerType)">
            <summary>
            To transfer the data from one table to another by using C# classes' instances as intermediary objects.
            The tables must be located in the same database.
            </summary>
            <typeparam name="TSource">the generic data type to represent the source table.</typeparam>
            <typeparam name="TDest">the generic data type to represent the destination table.</typeparam>
            <param name="connectionString">the SQL connection string to open the database connection.</param>
            <param name="sourceTableName">the name of the source table of the transfer.</param>
            <param name="destTableName">the name of the destination table of the transfer.</param>
            <param name="sourceToDestNameMapping">the source to destination class properties' name mapping (from TSource to TDest).</param>
            <param name="sourceExcludedPropertyNames">the names of the properties of source class whose values are NOT transferred to the destination class' instance.</param>
            <param name="destExcludedPropertyNames">the names of the properties of the destination class whose values are NOT transferred to the destination database row entry (likely is the Id of the entry).</param>
            <param name="destDateTimeFormat">the single (default) custom DateTimeFormat to be used in inserting the DateTime columns to the destination database.</param>
            <param name="destDateTimeFormatMap">the column-by-column map of custom DateTimeFormats to be used in inserting the DateTime columns to the destination database.</param>
            <param name="sqliteSourceDateTimeFormatMap">SQLite Only: the column-by-column map of custom DateTimeFormats to be used in extracting the DateTime columns from the source database.</param>
            <param name="oracleDestTimeStampList">Oracle Only: to list which columns are TIMESTAMP in the destination table.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>results of scalar execution of the INSERT INTO script.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetTablesAndViews(System.Data.Common.DbConnection,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of tables and views from a database connection.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved. Not Available in Oracle.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of tables and views.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetTablesAndViews(System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of tables and views from a database connection.
            </summary>
            <param name="connectionString">the SQL connection string to open the database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved. Not Available in Oracle.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of tables and views.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetTables(System.Data.Common.DbConnection,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of tables from a database connection.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of tables.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetTables(System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of tables from a database connection.
            </summary>
            <param name="connectionString">the SQL connection string to open the database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of tables.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetViews(System.Data.Common.DbConnection,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of views from a database connection.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of views.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetViews(System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of views from a database connection.
            </summary>
            <param name="connectionString">the SQL connection string to open the database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of views.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetTablesViewsAndColumns(System.Data.Common.DbConnection,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of tables and views and their respective data columns from a database connection.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved. Not Available in Oracle.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of tables and views and their respective data columns .</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetTablesViewsAndColumns(System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of tables and views and their respective data columns from a database connection.
            </summary>
            <param name="connectionString">the SQL connection string to open the database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved. Not Available in Oracle.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of tables and views and their respective data columns .</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetTablesAndColumns(System.Data.Common.DbConnection,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of tables and their respective data columns from a database connection.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of tables and their respective data columns .</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetTablesAndColumns(System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of tables and their respective data columns from a database connection.
            </summary>
            <param name="connectionString">the SQL connection string to open the database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of tables and their respective data columns .</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetViewsAndColumns(System.Data.Common.DbConnection,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of views and their respective data columns from a database connection.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of views and their respective data columns .</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetViewsAndColumns(System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of views and their respective data columns from a database connection.
            </summary>
            <param name="connectionString">the SQL connection string to open the database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of views and their respective data columns .</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetTablesViewsAndColumnNames(System.Data.Common.DbConnection,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of tables and views and their respective column names from a database connection.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved. Not Available in Oracle.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of tables and views and their respective column names.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetTablesViewsAndColumnNames(System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of tables and views and their respective column names from a database connection.
            </summary>
            <param name="connectionString">the SQL connection string to open the database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved. Not Available in Oracle.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of tables and views and their respective column names.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetTablesAndColumnNames(System.Data.Common.DbConnection,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of tables and their respective column names from a database connection.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of tables and their respective column names.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetTablesAndColumnNames(System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of tables and their respective column names from a database connection.
            </summary>
            <param name="connectionString">the SQL connection string to open the database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of tables and their respective column names.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetViewsAndColumnNames(System.Data.Common.DbConnection,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of views and their respective column names from a database connection.
            <para>
            This method does not open or close database connection. The connection must already be opened for the method to work.
            </para>
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of views and their respective column names.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetViewsAndColumnNames(System.String,System.String,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get list of views and their respective column names from a database connection.
            </summary>
            <param name="connectionString">the SQL connection string to open the database connection.</param>
            <param name="orderByClause">the ORDER BY clause to order the sequence of the data retrieved.</param>
            <param name="schema">SQL Server and MySQL Only: to specify schema to be used other than what has been provided by the current connection.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The list of views and their respective column names.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.HasEquivalentDataType(System.String,Extension.Database.DBHandlerType)">
            <summary>
            To check if equivalent .NET data type could be obtained from database's data-type string
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="dbDataTypeString">the database's data type in string.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>Equivalent .NET data type.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetEquivalentDataType(System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get equivalent .NET data type from database's data-type string
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="dbDataTypeString">the database's data type in string.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>Equivalent .NET data type.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.HasEquivalentDataType(System.Object,Extension.Database.DBHandlerType)">
            <summary>
            To check if equivalent .NET data type could be obtained from database's data-type
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="dbType">the database's data type.
            <para>SQL Server: [dbType] [object] must be of type [System.Data.SqlDbType]</para>
            <para>Oracle: [dbType] [object] must be of type [Oracle.ManagedDataAccess.Client.OracleDbType]</para>
            <para>MySQL: [dbType] [object] must be of type [MySql.Data.MySqlClient.SqlDbType]</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>Equivalent .NET data type.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetEquivalentDataType(System.Object,Extension.Database.DBHandlerType)">
            <summary>
            To get equivalent .NET data type from database's data-type
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="dbType">the database's data type.
            <para>SQL Server: [dbType] [object] must be of type [System.Data.SqlDbType]</para>
            <para>Oracle: [dbType] [object] must be of type [Oracle.ManagedDataAccess.Client.OracleDbType]</para>
            <para>MySQL: [dbType] [object] must be of type [MySql.Data.MySqlClient.SqlDbType]</para>
            </param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>Equivalent .NET data type.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.HasDbDataType(System.String,Extension.Database.DBHandlerType)">
            <summary>
            To check if equivalent SQL Server data type could be obtained from database's data-type string
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="dbDataTypeString">the database's data type in string.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>Equivalent .NET data type.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDbDataType(System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get equivalent SQL Server data type from database's data-type string
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="dbDataTypeString">the database's data type in string.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>Equivalent .NET data type.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetEquivalentData(System.Object,System.Object,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get equivalent .NET data from database's data
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="input">the database's data object.</param>
            <param name="dbType">the database's data type.
            <para>SQL Server: [dbType] [object] must be of type [System.Data.SqlDbType]</para>
            <para>Oracle: [dbType] [object] must be of type [Oracle.ManagedDataAccess.Client.OracleDbType]</para>
            <para>MySQL: [dbType] [object] must be of type [MySql.Data.MySqlClient.SqlDbType]</para>
            </param>
            <param name="dbDtFormat">the database's data's date-time format (only applied for date/date-time data).</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>Equivalent .NET data.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetEquivalentDataCollection(System.Object,System.Object,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get equivalent .NET data collection from database's data collection
            Note: this method is unavailable for SQLite.
            </summary>
            <param name="input">the database's data object (collection).</param>
            <param name="dbType">the database's data type.
            <para>SQL Server: [dbType] [object] must be of type [System.Data.SqlDbType]</para>
            <para>Oracle: [dbType] [object] must be of type [Oracle.ManagedDataAccess.Client.OracleDbType]</para>
            <para>MySQL: [dbType] [object] must be of type [MySql.Data.MySqlClient.SqlDbType]</para>
            </param>
            <param name="dbDtFormat">the database's data's date-time format (only applied for date/date-time data).</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>Equivalent .NET data collection.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetCsvString(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            To generate CSV string from the given DataTable
            </summary>
            <param name="table">the DataTable input</param>
            <param name="dateTimeFormat">format of data with DateTime data type to be written to the CSV file</param>
            <param name="headerExcluded">flag to include or exclude DataTable.Columns in the written CSV string</param>
            <returns>the CSV string result</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDbConnection(System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get suitable database connection based on used DBHandlerType.
            </summary>
            <param name="connectionString">the string used to establish connection with the database.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The database connection according to the DBHandlerType.</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDbCommand(System.Data.Common.DbConnection,System.String,Extension.Database.DBHandlerType)">
            <summary>
            To get suitable database command based on used DBHandlerType.
            </summary>
            <param name="conn">the already opened database connection.</param>
            <param name="script">the script to be executed using non-query execution.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The database command according to the DBHandlerType</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDbParameter(System.String,System.Object,Extension.Database.DBHandlerType)">
            <summary>
            To get suitable database parameter based on used DBHandlerType.
            </summary>
            <param name="name">the name of the parameter.</param>
            <param name="value">the value of the parameter.</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The database parameter according to the DBHandlerType</returns>
        </member>
        <member name="M:Extension.Database.DBHandler.GetDbDataAdapter(System.Data.Common.DbCommand,Extension.Database.DBHandlerType)">
            <summary>
            To get suitable database data adapter based on used DBHandlerType.
            </summary>
            <param name="command">the command for the adapter (if any).</param>
            <param name="dbHandlerType">the database handler type used for the operation.</param>
            <returns>The database data adapter according to the DBHandlerType</returns>
        </member>
        <member name="T:Extension.Database.DBHandlerType">
            <summary>
            The database type used for operation using DBHandler
            </summary>
        </member>
        <member name="F:Extension.Database.DBHandlerType.SQLServer">
            <summary>
            SQL Server database type
            </summary>
        </member>
        <member name="F:Extension.Database.DBHandlerType.Oracle">
            <summary>
            Oracle database type
            </summary>
        </member>
        <member name="F:Extension.Database.DBHandlerType.MySQL">
            <summary>
            MySQL database type
            </summary>
        </member>
        <member name="F:Extension.Database.DBHandlerType.SQLite">
            <summary>
            SQLite database type
            </summary>
        </member>
        <member name="T:Extension.Database.DBBaseScriptModel">
            <summary>
            The basic model for the database basic command. Used primarily for stacking commands to be executed as a single transaction.
            </summary>
        </member>
        <member name="P:Extension.Database.DBBaseScriptModel.Script">
            <summary>
            The script part of the command
            </summary>
        </member>
        <member name="P:Extension.Database.DBBaseScriptModel.Pars">
            <summary>
            The parameters part of the command
            </summary>
        </member>
        <member name="M:Extension.Database.DBBaseScriptModel.#ctor(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            Constructor for the basic model for the database basic command. Used primarily for stacking commands to be executed as a single transaction.
            </summary>
            <param name="script">The script part of the command</param>
            <param name="pars">The parameters part of the command</param>
        </member>
        <member name="M:Extension.Database.DBBaseScriptModel.#ctor(Extension.Database.Oracle.OracleBaseScriptModel)">
            <summary>
            Constructor for the basic model for the database basic command. Used primarily for stacking commands to be executed as a single transaction.
            </summary>
            <param name="oracleBaseScriptModel">The base script model for Oracle database</param>
        </member>
        <member name="M:Extension.Database.DBBaseScriptModel.#ctor(Extension.Database.MySql.MySQLBaseScriptModel)">
            <summary>
            Constructor for the basic model for the database basic command. Used primarily for stacking commands to be executed as a single transaction.
            </summary>
            <param name="mySqlBaseScriptModel">The base script model for MySQL database</param>
        </member>
        <member name="M:Extension.Database.DBBaseScriptModel.#ctor(Extension.Database.Sqlite.SQLiteBaseScriptModel)">
            <summary>
            Constructor for the basic model for the database basic command. Used primarily for stacking commands to be executed as a single transaction.
            </summary>
            <param name="sqliteBaseScriptModel">The base script model for SQLite database</param>
        </member>
        <member name="M:Extension.Database.DBBaseScriptModel.#ctor(Extension.Database.SqlServer.SQLServerBaseScriptModel)">
            <summary>
            Constructor for the basic model for the database basic command. Used primarily for stacking commands to be executed as a single transaction.
            </summary>
            <param name="sqlServerBaseScriptModel">The base script model for SQL Server database</param>
        </member>
        <member name="M:Extension.Database.DBBaseScriptModel.ToOracleBaseScriptModel">
            <summary>
            Convert the DB script model to Oracle script model
            </summary>
            <returns></returns>
        </member>
        <member name="M:Extension.Database.DBBaseScriptModel.ToMySQLBaseScriptModel">
            <summary>
            Convert the DB script model to MySQL script model
            </summary>
            <returns></returns>
        </member>
        <member name="M:Extension.Database.DBBaseScriptModel.ToSQLiteBaseScriptModel">
            <summary>
            Convert the DB script model to SQLite script model
            </summary>
            <returns></returns>
        </member>
        <member name="M:Extension.Database.DBBaseScriptModel.ToSQLServerBaseScriptModel">
            <summary>
            Convert the DB script model to SQL Server script model
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
